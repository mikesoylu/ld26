// Generated by CoffeeScript 1.5.0
(function() {
  var Entity, Game, game, v,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  v = cp.v;

  Entity = (function(_super) {

    __extends(Entity, _super);

    function Entity(x, y, space) {
      this.space = space;
      Entity.__super__.constructor.call(this, 3, 1, 20, v(x, y));
      this.width = 12;
      this.height = 12;
      this.shape = new cp.CircleShape(this, 20, v(0, 0));
      this.shape.setFriction(1);
    }

    Entity.prototype.draw = function() {
      atom.context.fillStyle = "white";
      return atom.context.fillRect(this.p.x - this.width / 2, this.p.y - this.height / 2, this.width, this.height);
    };

    return Entity;

  })(cp.Body);

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      var player, space;
      Game.__super__.constructor.call(this);
      space = new cp.Space();
      player = new Entity(50, 50, space);
      space.addBody(player);
      space.addShape(player.shape);
      this.player = player;
      this.space = space;
      atom.input.bind(atom.key.LEFT_ARROW, "left");
      atom.input.bind(atom.key.RIGHT_ARROW, "right");
      atom.input.bind(atom.key.UP_ARROW, "up");
      atom.input.bind(atom.key.DOWN_ARROW, "down");
      atom.input.bind(atom.button.LEFT, "mouse");
    }

    Game.prototype.update = function(dt) {
      this.player.resetForces();
      if (atom.input.down("left")) {
        this.player.applyForce(v(-100, 0), v(0, 0));
      }
      if (atom.input.down("right")) {
        this.player.applyForce(v(100, 0), v(0, 0));
      }
      if (atom.input.down("up")) {
        this.player.applyForce(v(0, -100), v(0, 0));
      }
      if (atom.input.down("down")) {
        this.player.applyForce(v(0, 100), v(0, 0));
      }
      return this.space.step(dt);
    };

    Game.prototype.draw = function() {
      atom.context.fillStyle = "#000";
      atom.context.fillRect(0, 0, atom.width, atom.height);
      return this.player.draw();
    };

    return Game;

  })(atom.Game);

  game = new Game();

  window.onblur = function() {
    return game.stop();
  };

  window.onfocus = function() {
    return game.run();
  };

  game.run();

}).call(this);
